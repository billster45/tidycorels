% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{tidy_corels}
\alias{tidy_corels}
\title{tidy_corels}
\usage{
tidy_corels(df, outcome_cols, ...)
}
\arguments{
\item{df}{The dataframe to generate rules from. Applies the function corels::corels().}

\item{outcome_cols}{The two columns in df that represent the label. Corels expects two columns representing each class. Consider using recipes::step_dummy() to convert outcome to two columns.}

\item{...}{Set any of the arguments imported from corels::corels(). The following arguments are fixed by tidy_corels(): rules_file (generated from df), labels_file (generated from df), log_dir (set as tempdir()), verbosity_policy (set as "minor").}
}
\description{
The tidy_corels() function converts your dataframe into the text file format corels::corels() expects. Returns a list of R objects including: both the Corels rules and converted to dplyr::case_when() format, your datafame with the label geneated by the rules, an alluvial plot of the rules applied to your dataframe.
}
\details{
All variables must contain 0 or 1. Consider using recipes::step_dummy() to convert categorical variables to dummy columns. If variable is continous (e.g. age), consider using recipes::step_discretize() before recipes::step_dummy().

The names of the two outcome columns in outcome_cols argument must end in 0 and 1.
Consider using recipes::step_integer(recipes::all_outcomes(), zero_based = TRUE) to convert outcome values to 0/1 before using recipes::step_dummy() to create the two outcome columns Corels requires.
}
\examples{

library(magrittr)
# Using mtcars dataset and recipes, create binary predictors as Corels expects

corels_pre_proc <-
  recipes::recipe(am ~ .,
                  data = datasets::mtcars
  ) \%>\%
  # discretise numeric variables into bins
  recipes::step_discretize(mpg, disp, hp, drat, wt, qsec, min_unique = 1) \%>\%
  recipes::step_mutate_at(recipes::all_predictors(), fn = list(~ as.factor(.))) \%>\%
  # convert each value of each category into its own 0/1 binary column
  recipes::step_dummy(recipes::all_predictors(), one_hot = TRUE) \%>\%
  recipes::step_nzv(recipes::all_predictors()) \%>\%
  # convert each value of the outcome into its own 0/1 binary column
  # ensure outcome is 0/1 rather than words
  recipes::step_integer(recipes::all_outcomes(), zero_based = TRUE) \%>\%
  recipes::step_mutate_at(recipes::all_outcomes(), fn = list(~ as.factor(.))) \%>\%
  recipes::step_dummy(recipes::all_outcomes(), one_hot = TRUE)

#Create a pre-processed dataframe from the mtcars recipe above

corels_juiced <-
  corels_pre_proc \%>\%
  recipes::prep() \%>\%
  recipes::juice()

# Run the tidy_corels() function

  corels_juiced_tidy <-
   tidycorels::tidy_corels(
     df = corels_juiced,
     outcome_cols = c("am_X0", "am_X1"),
     run_bfs = TRUE,
     calculate_size = TRUE,
     run_curiosity = TRUE,
     regularization = 0.01,
     curiosity_policy = 3,
     map_type = 1
  )

# View the alluvial plot of the Corels rules applied to df

corels_juiced_tidy$alluvial_plot
}
